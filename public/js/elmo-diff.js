var Diff=function(t){var e={};function s(i){if(e[i])return e[i].exports;var n=e[i]={i:i,l:!1,exports:{}};return t[i].call(n.exports,n,n.exports,s),n.l=!0,n.exports}return s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:i})},s.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=2)}([function(t,e){t.exports={swap:function(t,e,s){const i=t[e];t[e]=t[s],t[s]=i},i_maxScore:function(t,e,s){return t[e].score>=t[s].score?e:s}}},function(t,e,s){const i=s(0);t.exports=class{constructor(){this.items=[]}get size(){return this.items.length}isEmpty(){return 0==this.size}push(t,e){let s=this.size;for(this.items.push({item:t,score:e});s>0;){let t=Math.floor((s-1)/2);if(!(this.items[t].score<this.items[s].score))break;i.swap(this.items,s,t),s=t}return this}pop(){return this.remove(0)}peep(){if(this.size>0)return this.items[0]}sample(){if(0!=this.size){for(var t=null,e=0;e<this.size;e++){const s=this.items[e];s.key=Math.pow(Math.random(),1/(s.score+1)),s.index=e,e<1?t=this.items[e]:s.key>t.key&&(t=s)}return t}}remove(t){if(t>=this.size)return;i.swap(this.items,t,this.size-1);const e=this.items.pop();let s=t;for(;s<this.size;){let t=2*s+1,e=2*s+2,n=0;if(t>=this.size)break;if(n=e>=this.size?t:i.i_maxScore(this.items,t,e),!(this.items[n].score>this.items[s].score))break;i.swap(this.items,s,n),s=n}return e}get toString(){return this.items.map(t=>t.item+" ("+t.score+")").join(", ")}}},function(t,e,s){const i=s(1);t.exports=class t{constructor(t,e){if(""==t)throw"Source cannot be empty";if(""==e)throw"Target cannot be empty";this.source=t,this.target=e,this.iteration=0,this.queue=new i,this.queue.push(this.newPoint(0,0),1),this.nodes={},this.endpoint=this.newPoint(this.source.length,this.target.length)}newPoint(t,e){return{x:t,y:e,id:t*this.source.length+e,dlength:0,parent:null}}step(){const t=Math.random()<.8/Math.sqrt(this.iteration)?this.queue.sample():this.queue.pop(),e=t.item;this.isTarget(e)||(this.queue.remove(t.index),this.getNeighbors(e).forEach(t=>{const{x:s,y:i,dlength:n}=t,r=Math.hypot(s-this.endpoint.x,i-this.endpoint.y),h=Math.max(s+i,s+i-r)-2*n;t.dlength=e.dlength+1,t.id in this.nodes&&this.nodes[t.id].dlength>t.dlength?(this.nodes[t.id].parent=e.id,this.nodes[t.id].dlength=t.dlength):(t.parent=e.id,this.queue.push(t,h),this.nodes[t.id]=t)}),this.iteration++)}getNeighbors({x:t,y:e}){const s=({x:t,y:e})=>{for(;t<this.source.length&&e<this.target.length&&this.source.charAt(t)==this.target.charAt(e);)t++,e++;return this.newPoint(t,e)},i=[],n=this.source.charAt(t)==this.target.charAt(e);return t==this.endpoint.x&&e==this.endpoint.y?[this.endpoint]:(n?i.push(s({x:t+1,y:e+1})):(t+1<=this.source.length&&i.push(s({x:t+1,y:e})),e+1<=this.target.length&&i.push(s({x:t,y:e+1}))),i)}isTarget({x:t,y:e}){return t==this.source.length&&e==this.target.length}computePath(){for(this.step();!(this.endpoint.id in this.nodes);)this.step();const t=[];let e=this.endpoint.id;do{t.push(this.nodes[e]),e=this.nodes[e].parent}while(null!=e&&0!=e);return t.push(this.newPoint(0,0)),t}visualize(){for(var t="",e=0;e<this.source.length;e++){for(var s=0;s<this.target.length;s++)t+=e*this.source.length+s in this.nodes?"o":"-";t+="\n"}return t}serialize(t){function e(t,e){let s=t.x,i=t.y,n={x:e.x,y:e.y};if(s==n.x&&i==n.y)throw"No transition can be done";let r=Math.min(Math.abs(s-n.x),Math.abs(i-n.y));return n.x-=r,n.y-=r,s==n.x&&i+1==n.y?"i":s+1==n.x&&i==n.y?"d":void 0}t.reverse();let s="";for(var i=0;i<t.length-1;i++){const n=e(t[i],t[i+1]);"i"==n?s+=t[i].y+":"+this.target.charAt(t[i].y)+",":"d"==n&&(s+=t[i].x+",")}return s.substring(0,s.length-1)}static apply(t,e){let s=0,i=t;return e.split(",").forEach(t=>{if(0!=t.length)if((t=t.split(":")).length>1){let e=t[0];i=i.substring(0,e)+t[1]+i.substring(e),s--}else{let e=t[0]-s;i=i.substring(0,e)+i.substring(e+1),s++}}),i}static diff(e,s,i=3){let n=null;for(var r=0;r<i;r++){const i=new t(e,s).computePath();(null==n||i.length<n.length)&&(n=i)}return new t(e,s).serialize(n)}}}]);